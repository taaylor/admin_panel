services:
  django:
    build:
      context: .
      dockerfile: movies_admin/Dockerfile
    restart: always
    volumes:
      - ./movies_admin:/opt/app
      - volume_static:/data/static  # Статика
      - volume_media:/data/media  # Медиа-файлы
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    image: postgres:16
    restart: always
    volumes:
      - data_postgres:/var/lib/postgresql/data
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DBNAME}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DBNAME}"]
      interval: 5s 
      retries: 10 
      timeout: 3s 

  nginx:
    build:
      context: .
      dockerfile: Dockerfile.ngx
    restart: always
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./configs:/etc/nginx/conf.d:ro
      - volume_static:/data/static
      - volume_media:/data/media
    ports:
      - 80:80
    depends_on:
      - django
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      retries: 3
      timeout: 3s 

  redis:
    image: redis:7-alpine
    restart: always
    command: ["redis-server", "--loglevel", "warning"]
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]   
      interval: 10s                    
      timeout: 5s                          
      retries: 10

  elasticsearch:   
    build:
      context: .
      dockerfile: Dockerfile.elastic
    restart: always
    volumes:
      - elastic_data:/usr/share/elasticsearch/data
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms200m -Xmx200m
    ports:
      - 9200:9200
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 12s                    
      timeout: 7s                          
      retries: 10

  etl:
    build:
      context: .
      dockerfile: etl/Dockerfile.etl
    restart: always
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      redis:
        condition: service_healthy

volumes:
  data_postgres:
  volume_static:
  volume_media:
  redis_data:
  elastic_data:

